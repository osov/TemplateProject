local ____exports = {}
local show_rate, show_form, init_rate_info, show_rate_form, mark_ok, rate_log, first_start
local druid = require("druid.druid")
local ____game_config = require("main.game_config")
local IS_HUAWEI = ____game_config.IS_HUAWEI
local RATE_FIRST_SHOW = ____game_config.RATE_FIRST_SHOW
local RATE_SECOND_SHOW = ____game_config.RATE_SECOND_SHOW
local ____utils = require("utils.utils")
local hide_gui_list = ____utils.hide_gui_list
local show_gui_list = ____utils.show_gui_list
function show_rate(cnt, _this)
    _this.rate_val = cnt + 1
    do
        local i = 0
        while i < 5 do
            gui.play_flipbook(
                gui.get_node("s" .. tostring(i)),
                i <= cnt and "star_1" or "star_0"
            )
            i = i + 1
        end
    end
    show_gui_list({"btnRate"})
end
function show_form()
    rate_log("show rate check")
    if mark_ok() then
        Rate._mark_shown()
        rate_log("show rate OK")
        gui.set_enabled(
            gui.get_node("rate_bg"),
            true
        )
    end
end
function init_rate_info()
    rate_log = Log.get_with_prefix("rate").log
    first_start = Storage.get_int("firstStart", 0)
    if first_start == 0 then
        Storage.set(
            "firstStart",
            System.now()
        )
        first_start = System.now()
    end
end
function show_rate_form(_this)
    Storage.set("isRated", 1)
    if _this.rate_val < 4 then
        return
    end
    if System.platform == "HTML5" then
        Ads.feedback_request_review(function()
            log("feedback result:")
        end)
    elseif System.platform == "Android" and not IS_HUAWEI or System.platform == "iPhone OS" then
        if review ~= nil and review.is_supported() then
            review.request_review()
        else
            rate_log("review not supported")
        end
    else
        rate_log("not supported platform", System.platform)
    end
end
function mark_ok()
    if Storage.get_int("isRated", 0) == 1 then
        rate_log("is rated")
        return false
    end
    local firstShow = Storage.get_int("firstShow", 0)
    local wait = firstShow == 0 and RATE_FIRST_SHOW or RATE_SECOND_SHOW
    local dt = System.now() - first_start
    if dt >= wait then
        if firstShow ~= 0 then
            Storage.set("isRated", 1)
        end
        if firstShow == 0 then
            Storage.set(
                "firstShow",
                System.now()
            )
        end
        rate_log("mark ok = true")
        return true
    else
        rate_log("wait time:" .. tostring(wait - dt))
        return false
    end
end
local function init_gui(_this)
    gui.set_render_order(10)
    Lang.apply()
    hide_gui_list({"btnRate"})
    _this.rate_val = 0
    _this.druid = druid.new(_this)
    _this.druid:new_blocker("rate_bg")
    _this.druid:new_button(
        "btnClose",
        function()
            gui.set_enabled(
                gui.get_node("rate_bg"),
                false
            )
        end
    )
    _this.druid:new_button(
        "btnRate",
        function()
            gui.set_enabled(
                gui.get_node("rate_bg"),
                false
            )
            show_rate_form(_this)
        end
    )
    _this.druid:new_button(
        "s0",
        function() return show_rate(0, _this) end
    )
    _this.druid:new_button(
        "s1",
        function() return show_rate(1, _this) end
    )
    _this.druid:new_button(
        "s2",
        function() return show_rate(2, _this) end
    )
    _this.druid:new_button(
        "s3",
        function() return show_rate(3, _this) end
    )
    _this.druid:new_button(
        "s4",
        function() return show_rate(4, _this) end
    )
end
function ____exports.on_input(self, action_id, action)
    if not Manager then
        return
    end
    Camera.transform_input_action(action)
    local ____opt_0 = self.druid
    return ____opt_0 and ____opt_0:on_input(action_id, action)
end
function ____exports.update(self, dt)
    local ____opt_2 = self.druid
    if ____opt_2 ~= nil then
        ____opt_2:update(dt)
    end
end
function ____exports.on_message(self, message_id, message, sender)
    if message_id == hash("MANAGER_READY") then
        init_gui(self)
        init_rate_info()
        EventBus.on(
            "SYS_SHOW_RATE",
            function() return show_form() end
        )
        EventBus.on(
            "ON_APPLY_CUSTOM_LANG",
            function() return Lang.apply() end
        )
    end
    local ____opt_4 = self.druid
    if ____opt_4 ~= nil then
        ____opt_4:on_message(message_id, message, sender)
    end
end
function ____exports.final(self)
    local ____opt_6 = self.druid
    if ____opt_6 ~= nil then
        ____opt_6:final()
    end
end
first_start = 0
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

